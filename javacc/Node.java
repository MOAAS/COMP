/* Generated By:JJTree: Do not edit this line. Node.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
/* All AST nodes must implement this interface.  It provides basic
   machinery for constructing the parent and child relationships
   between nodes. */
import java.util.HashMap;
import java.util.Set;

public
interface Node {

  /** This method is called after the node has been made the current
    node.  It indicates that child nodes can now be added to it. */
  void jjtOpen();

  /** This method is called after all the child nodes have been
    added. */
  void jjtClose();

  /** This pair of methods are used to inform the node of its
    parent. */
  void jjtSetParent(Node n);
  Node jjtGetParent();

  /** This method tells the node to add its argument to the node's
    list of children.  */
  void jjtAddChild(Node n, int i);

  /** This method returns a child node.  The children are numbered
     from zero, left to right. */
  Node jjtGetChild(int i);

  Node jjtGetLastChild();

  /** Return the number of children the node has. */
  int jjtGetNumChildren();

  /** Return the children nodes. */
  Node[] jjtGetChildren();

  void dump(String prefix);

  int getId();

  String generateCode();

  String getType();

  StackLimitValues calculateStackLimit(StackLimitValues slv);

  boolean isSemanticallyCorrect(HashMap<String, Integer> varInitTable);

  HashMap<String, Integer> getVarInitTable();
  
  Node constantPropagation(HashMap<String,Node> vm);

  boolean explore(int order, SymbolTable symbolTable);

  Node expressionSimplification();

  Node deadCodeElimination();

  void loopUnrolling();

  void whileAnalyser(Set<String> wa);
}
/* JavaCC - OriginalChecksum=294ffdf27877b89014c8d569232ea9dc (do not edit this line) */
