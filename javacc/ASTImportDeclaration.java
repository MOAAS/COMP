/* Generated By:JJTree: Do not edit this line. ASTImportDeclaration.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.HashMap;
public
class ASTImportDeclaration extends SimpleNode {
  public boolean isStatic = false;

  public ASTImportDeclaration(int id) {
    super(id);
  }

  public ASTImportDeclaration(JavaMMParser p, int id) {
    super(p, id);
  }

  public String generateCode() {
    return "";
  }

  @Override
  public boolean isSemanticallyCorrect(HashMap<String, Integer> varInitTable) {
    return true;
  }

  public boolean explore(int order, SymbolTable parentTable) {
    super.explore(order, parentTable);

    Node[] children = this.jjtGetChildren();
    StringBuilder importName = new StringBuilder();
    StringBuilder importArgs = new StringBuilder();
    String returnType = "";
    String className = "";
    boolean isStatic = false;
    boolean isMethod = false;
    for(int i = 0; i < children.length; i++) {
      Node node = children[i];

      switch (node.toString()) {
        case "ImportName":
          isMethod = ((ASTImportName)node).isMethod;
          Node[] nameChildren = node.jjtGetChildren();
          if(nameChildren.length != 0) className = nameChildren[0].toString();
          for(int j = 0; j < nameChildren.length; j++) {
            Node nameNode = nameChildren[j];
            if(j == nameChildren.length - 1) importName.append(nameNode.toString());
            else importName.append(nameNode.toString()).append(".");
          }
          break;

        case "ImportArgs":
          Node[] argsChildren = node.jjtGetChildren();
          if (argsChildren.length == 0 && this.children[1].jjtGetNumChildren() == 1)
            break;
          importArgs.append("(");
          for(int j = 0; j < argsChildren.length; j++) {
            Node argNode = argsChildren[j];
            if(j == argsChildren.length - 1) importArgs.append(argNode.toString());
            else importArgs.append(argNode.toString()).append(",");
          }
          importArgs.append(")");
          break;
        case "ImportType":
          if(node.jjtGetNumChildren() == 0) returnType = "void";
          else returnType = node.jjtGetChild(0).toString();
          break;
        case "ImportLifetime":
          isStatic = ((ASTImportLifetime)node).isStatic;
          break;
      }
    }

    ImportSymbol importSymbol = new ImportSymbol(returnType, isStatic, -1);
    String fullName = importName.toString() + importArgs.toString();

    if (!isMethod && isStatic) {
      System.err.println("Error: Invalid import declaration \"" + fullName + "\", constructor cannot be static, at line " + this.line + ", column " + this.column + ".");
      return false;
    }
    if (!isMethod && !returnType.equals("void")) {
      System.err.println("Error: Invalid import declaration \"" + fullName + "\", constructor cannot return a value, at line " + this.line + ", column " + this.column + ".");
      return false;
    }

    if(parentTable.checkIfSymbolExists(fullName)) {
      System.err.println("Warning: Duplicate import declaration \"" + fullName + "\" at line " + this.line + ", column " + this.column + ".");
    }
    else {
      parentTable.put(fullName, importSymbol);
      parentTable.addImportedClassName(className);
    }

    return true;
  }
}
/* JavaCC - OriginalChecksum=78816fbd0d1331af371140193a1eabb0 (do not edit this line) */
