/* Generated By:JJTree: Do not edit this line. ASTAnd.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.HashMap;
public
class ASTAnd extends SimpleNode {
  public ASTAnd(int id) {
    super(id);
  }

  public ASTAnd(JavaMMParser p, int id) {
    super(p, id);
  }

  public String getType() {
    return "boolean";
  }

  @Override
  public String generateCode() {
    StringBuilder code = new StringBuilder();

    return super.generateCode() + "iand\n";
  }

  @Override
  public StackLimitValues calculateStackLimit(StackLimitValues slv){
    return super.calculateStackLimit(slv).decStack(1);
  }

  public boolean isSemanticallyCorrect(HashMap<String, Integer> varInitTable) {
    if(!super.isSemanticallyCorrect(varInitTable))
      return false;
    Node[] children = this.jjtGetChildren();
    Node operator1 = children[0];
    Node operator2 = children[1];

    if(!operator1.getType().equals("boolean")){
      System.err.println("Error: Left operand of < is not a boolean. Found: " + operator1.getType() + " at line " + ((SimpleNode)operator1).line + ", column " + ((SimpleNode)operator1).column + ".");
      return false;
    }
    if(!operator2.getType().equals("boolean")){
      System.err.println("Error: Right operand of < is not a boolean. Found:" + operator2.getType() + " at line " + ((SimpleNode)operator2).line + ", column " + ((SimpleNode)operator2).column + ".");
      return false;
    }
    return true;
  }

  public Node expressionSimplification() {
    super.expressionSimplification();
    // e.g true && anything
    if (children[0] instanceof ASTTrue)
      return children[1];
    // e.g anything && true
    if (children[1] instanceof ASTTrue)
      return children[0];
    // e.g false && var, var && false
    if (children[0] instanceof ASTFalse && children[1] instanceof ASTIdentifier ||
        children[1] instanceof ASTFalse && children[0] instanceof ASTIdentifier)
      return new ASTFalse(JavaMMParserTreeConstants.JJTFALSE);

    return this;
  }
}
/* JavaCC - OriginalChecksum=e4ed6866b664ddd2674b92da2f7679fe (do not edit this line) */
