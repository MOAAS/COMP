/* Generated By:JJTree: Do not edit this line. ASTLessThan.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.HashMap;
public
class ASTLessThan extends SimpleNode {
  public ASTLessThan(int id) {
    super(id);
  }

  public ASTLessThan(JavaMMParser p, int id) {
    super(p, id);
  }

  public String getType() {
    return "boolean";
  }


  @Override
  public String generateCode() {
    String label1 = "LABEL" + SimpleNode.getLabel();
    String label2 = "LABEL" + SimpleNode.getLabel();

    return super.generateCode()
        + "if_icmplt " + label1 + "\n"
        + "iconst_0\n"
        + "goto " + label2 + "\n"
        + label1 + ":\n"
        + "iconst_1\n"
        + label2 + ":\n";
  }

  @Override
  public StackLimitValues calculateStackLimit(StackLimitValues slv){
    return super.calculateStackLimit(slv).decStack(1);
  }

  public boolean isSemanticallyCorrect(HashMap<String, Integer> varInitTable) {
    if(!super.isSemanticallyCorrect(varInitTable))
      return false;
    Node[] children = this.jjtGetChildren();
    Node operator1 = children[0];
    Node operator2 = children[1];

    if(!operator1.getType().equals("int")){
      System.err.println("Error: Left operand of < is not an int. Found: " + operator1.getType() + " at line " + ((SimpleNode)operator1).line + ", column " + ((SimpleNode)operator1).column + ".");
      return false;
    }
    if(!operator2.getType().equals("int")){
      System.err.println("Error: Right operand of < is not an int. Found: " + operator2.getType() + " at line " + ((SimpleNode)operator2).line + ", column " + ((SimpleNode)operator2).column + ".");
      return false;
    }
    return true;
  }

  public Node expressionSimplification() {
    super.expressionSimplification();
    if (children[0] instanceof ASTInteger && children[1] instanceof ASTInteger) {
      boolean result = Integer.parseInt(children[0].toString()) < Integer.parseInt(children[1].toString());
      if (result)
        return new ASTTrue(JavaMMParserTreeConstants.JJTTRUE);
      else return new ASTFalse(JavaMMParserTreeConstants.JJTFALSE);
    }
    return this;
  }
}
/* JavaCC - OriginalChecksum=08b731df9e1d76038b20a960f1ee5265 (do not edit this line) */
