/* Generated By:JJTree: Do not edit this line. ASTIdentifier.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.HashMap;
import java.util.List;

public
class ASTIdentifier extends SimpleNode {
  public ASTIdentifier(int id) {
    super(id);
  }

  public ASTIdentifier(JavaMMParser p, int id) {
    super(p, id);
  }

  @Override
  public String toString() {
    return this.value.toString();
  }

  @Override
  public String getType() {
    VarSymbol type = this.getSymbolTable().getVarSymbol(this.value.toString());
    if(type == null)
      return "class";
    return type.getVarType();
  }

  @Override
  public String generateCode() {
    String identifier = this.value.toString();
    VarSymbol local = this.symbolTable.getLocalVarSymbol(identifier);
    VarSymbol global = this.symbolTable.getVarSymbol(identifier);
    if (local != null)
      return this.generateLoadLocal(local);
    return this.generateLoadGlobal(global);

  }

  private String generateLoadLocal(VarSymbol symbol) {
    int order = symbol.getOrder();
    String type = symbol.getVarType();

    String orderStr = order >= 0 && order <= 3 ? "_" + order : " " + order;
    switch (type) {
      //case 'IntArray': return "aload" + orderStr;
      case "int":
      case "boolean": return "iload" + orderStr + "\n";
      default: return "aload" + orderStr + "\n";
    }
  }

  private String generateLoadGlobal(VarSymbol symbol) {
    return "aload_0\n" + "getfield " + this.symbolTable.getClassName() + "/field_" + this.value + " " + ASTType.generateCodeChar(symbol.getVarType()) + "\n";
  }

  @Override
  public StackLimitValues calculateStackLimit(StackLimitValues slv){
    return slv.incStack(1);
  }

  @Override
  public Node constantPropagation(HashMap<String,Node> vm){
    if(this.parent instanceof ASTAssignment && this.parent.jjtGetChildren()[0] == this)
      return this;

   //System.out.println(this.value.toString());
   //System.out.println("Map:");
   //for (HashMap.Entry<String, Node> entry : vm.entrySet())
   //  System.out.println("Variable: " + entry.getKey() + entry.getValue());
   //System.out.println("");

    if(vm.containsKey(this.value.toString())) { //if variable has constant value, variable node gets replaced with the constant node stored in the constant variable map
      Node vs = vm.get(this.value.toString());
      //System.out.println("Substitute to : " + vs);
      return vs;
    }
    return this;
  }

  @Override
  public boolean isSemanticallyCorrect(HashMap<String, Integer> varInitTable) {
    Symbol symbol = this.symbolTable.getSymbol(this.value.toString());
    if (symbol == null) {
      System.err.println("Error: Symbol \"" + this.value.toString() + "\" does not exist at line " + this.line + ", column " + this.column + ".");
      return false;
    }
    if (this.parent instanceof ASTClassInfo)
      return true;
    if (this.symbolTable.getVarSymbol(this.value.toString()) == null)
      return true;
    if (this.parent instanceof ASTAssignment && this.parent.jjtGetChild(0) == this)
      return true;

    int varInitValue = varInitTable.get(this.value.toString());
    if (varInitValue != 2) {
      if (varInitValue == 0) {
        System.err.println("Error: Variable \"" + this.value.toString() + "\" has not been initialized at line " + this.line + ", column " + this.column + ".");
        return false;
      }
      else System.err.println("Warning: Variable \"" + this.value.toString() + "\" may not have been initialized at line " + this.line + ", column " + this.column + ".");
    }
    return true;
  }

  public void fillGraph(HashMap<String, LiveNode> graph, List<LiveNode> activeList) {
    boolean isLocal = this.symbolTable.getLocalVarSymbol(this.toString()) != null;
    boolean isGlobal = this.symbolTable.getVarSymbol(this.toString()) != null;

    LiveNode self = graph.get(this.toString());
    if(!isLocal && isGlobal) {
      self = graph.get("this");
      if(self == null) {
        self = new LiveNode("this", 0);
        graph.put("this", self);
      }
    }
    else if(self == null) return;

    for(int i = activeList.size() - 1; i >= 0; i--) { //Goes back until previous use/def of var and creates edges with all nodes in-between
      LiveNode node = activeList.get(i);
      if(node.equals(self)) break;
      self.createEdge(node);
    }

    activeList.add(self); //Adds node to list
  }

}
/* JavaCC - OriginalChecksum=cbe027d57269a295a92ec155a2ee2d12 (do not edit this line) */
