/* Generated By:JJTree: Do not edit this line. ASTInteger.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */


public
class ASTInteger extends SimpleNode {
  public ASTInteger(String value) {
    super(JavaMMParserTreeConstants.JJTINTEGER);
    this.value = value;
  }

  public ASTInteger(ASTInteger node) {
    super(JavaMMParserTreeConstants.JJTINTEGER);
    this.value = node.value;
  }

  public ASTInteger(int id) {
    super(id);
  }

  public ASTInteger(JavaMMParser p, int id) {
    super(p, id);
  }


  @Override
  public String toString() {
    return this.value.toString();
  }

  @Override
  public String generateCode() {
    int num = Integer.parseInt(this.value.toString());
    if (num == -1)
      return "iconst_m1\n";
    if (num >= 0 && num <= 5)
      return "iconst_" + num + "\n";
    if (num >= -128 && num <= 127)
      return "bipush " + num + "\n";
    if (num >= -32768 && num <= 32767)
      return "sipush " + num + "\n";
    return "ldc " + num + "\n";
  }

  @Override
  public StackLimitValues calculateStackLimit(StackLimitValues slv){
    return slv.incStack(1);
  }

  public static boolean isPowerOfTwo(Node node) {
    if (!(node instanceof ASTInteger))
      return false;
    int num = Integer.parseInt(node.toString());
    return num != 0 && (num & (num - 1)) == 0;
  }

  public static boolean isNumber(Node node, int num) {
    return node instanceof ASTInteger &&  Integer.parseInt(node.toString()) == num;
  }

  public static String pushLog2(int num) {
    return "bipush " +  (int)(Math.log(num) / Math.log(2))  + "\n";
  }

  @Override
  public String getType() {
    return "int";
  }
}
/* JavaCC - OriginalChecksum=b3fa510610f8891fd76f52676930b0da (do not edit this line) */
