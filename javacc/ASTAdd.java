/* Generated By:JJTree: Do not edit this line. ASTAdd.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.HashMap;
public
class ASTAdd extends SimpleNode {
  public ASTAdd(int id) {
    super(id);
  }

  public ASTAdd(JavaMMParser p, int id) {
    super(p, id);
  }

  @Override
  public String generateCode() {
    return super.generateCode() + "iadd\n";
  }

  @Override
  public StackLimitValues calculateStackLimit(StackLimitValues slv){
     return super.calculateStackLimit(slv).decStack(1);
  }

  public boolean isSemanticallyCorrect(HashMap<String, Integer> varInitTable) {
    if(!super.isSemanticallyCorrect(varInitTable))
      return false;
    Node[] children = this.jjtGetChildren();
    Node operator1 = children[0];
    Node operator2 = children[1];

    if(!operator1.getType().equals("int")){
      System.err.println("Error: Left operand of + is not an int. Found: " + operator1.getType() + " at line " + ((SimpleNode)operator1).line + ", column " + ((SimpleNode)operator1).column + ".");
      return false;
    }
    if(!operator2.getType().equals("int")){
      System.err.println("Error: Right operand of + is not an int. Found: " + operator2.getType() + " at line " + ((SimpleNode)operator2).line + ", column " + ((SimpleNode)operator2).column + ".");
      return false;
    }
    return true;
  }

  public Node expressionSimplification() {
    super.expressionSimplification();
    // e.g  0 + anything
    if (ASTInteger.isNumber(children[0], 0))
      return children[1];
    // e.g  anything + 0
    if (ASTInteger.isNumber(children[1], 0))
      return children[0];

    if (children[0] instanceof ASTInteger && children[1] instanceof ASTInteger)
      return new ASTInteger(String.valueOf(Integer.parseInt(children[0].toString()) + Integer.parseInt(children[1].toString())));
    else return this;
  }

  public String getType() {
    return "int";
  }
}
/* JavaCC - OriginalChecksum=bf990695d6746517be1ec4e7cc2df53c (do not edit this line) */
