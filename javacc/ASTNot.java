/* Generated By:JJTree: Do not edit this line. ASTNot.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.HashMap;
public
class ASTNot extends SimpleNode {
  public ASTNot(int id) {
    super(id);
  }

  public ASTNot(JavaMMParser p, int id) {
    super(p, id);
  }

  public String getType() {
    return "boolean";
  }

  @Override
  public String generateCode() {
    String label1 = "LABEL" + SimpleNode.getLabel();
    String label2 = "LABEL" + SimpleNode.getLabel();

    return super.generateCode()
        + "ifeq " + label1 + "\n"
        + "iconst_0\n"
        + "goto " + label2 + "\n"
        + label1 + ":\n"
        + "iconst_1\n"
        + label2 + ":\n";
  }

  public boolean isSemanticallyCorrect(HashMap<String, Integer> varInitTable) {
    if(!super.isSemanticallyCorrect(varInitTable))
      return false;
    Node[] children = this.jjtGetChildren();
    Node operator1 = children[0];

    if(!operator1.getType().equals("boolean")){
      System.err.println("Error: Operand of ! is not a boolean. Found: " + operator1.getType() + " at line " + ((SimpleNode)operator1).line + ", column " + ((SimpleNode)operator1).column + ".");
      return false;
    }
    return true;
  }

  public Node expressionSimplification() {
    super.expressionSimplification();
    if (children[0] instanceof ASTTrue)
      return new ASTFalse(JavaMMParserTreeConstants.JJTFALSE);
    if (children[0] instanceof ASTFalse)
      return new ASTTrue(JavaMMParserTreeConstants.JJTTRUE);
    return this;
  }
}
/* JavaCC - OriginalChecksum=7125e3ce0c6a84fbcf9e9edaebf72c8a (do not edit this line) */
