/* Generated By:JJTree: Do not edit this line. ASTMul.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.HashMap;
public
class ASTMul extends SimpleNode {
  public ASTMul(int id) {
    super(id);
  }

  public ASTMul(JavaMMParser p, int id) {
    super(p, id);
  }

  @Override
  public String generateCode() {
    Node leftOperand = children[0];
    Node rightOperand = children[1];
    // e.g  a * 4
    if (ASTInteger.isPowerOfTwo(rightOperand)) {
      return leftOperand.generateCode() + ASTInteger.pushLog2(Integer.parseInt(rightOperand.toString())) + "ishl\n";
    }
    // e.g  4 * a
    if (ASTInteger.isPowerOfTwo(leftOperand)) {
      return rightOperand.generateCode() + ASTInteger.pushLog2(Integer.parseInt(leftOperand.toString())) + "ishl\n";
    }

    return super.generateCode() + "imul\n";
  }

  public String getType() {
    return "int";
  }

  @Override
  public StackLimitValues calculateStackLimit(StackLimitValues slv){
    return super.calculateStackLimit(slv).decStack(1);
  }

  public boolean isSemanticallyCorrect(HashMap<String, Integer> varInitTable) {
    if(!super.isSemanticallyCorrect(varInitTable))
      return false;
    Node[] children = this.jjtGetChildren();
    Node operator1 = children[0];
    Node operator2 = children[1];

    if(!operator1.getType().equals("int")){
      System.err.println("Error: Left operand of * is not an int. Found: " + operator1.getType() + " at line " + ((SimpleNode)operator1).line + ", column " + ((SimpleNode)operator1).column + ".");
      return false;
    }
    if(!operator2.getType().equals("int")){
      System.err.println("Error: Right operand of * is not an int. Found: " + operator2.getType() + " at line " + ((SimpleNode)operator2).line + ", column " + ((SimpleNode)operator2).column + ".");
      return false;
    }
    return true;
  }

  public Node expressionSimplification() {
    super.expressionSimplification();
    // e.g  var * 0 , 0 * var
    if (ASTInteger.isNumber(children[0], 0) && children[1] instanceof ASTIdentifier ||
        ASTInteger.isNumber(children[1], 0) && children[0] instanceof ASTIdentifier)
      return new ASTInteger("0");
    // e.g  1 * anything
    if (ASTInteger.isNumber(children[0], 1))
      return children[1];
    // e.g  anything * 1
    if (ASTInteger.isNumber(children[1], 1))
      return children[0];


    // e.g  43 * 7
    if (children[0] instanceof ASTInteger && children[1] instanceof ASTInteger)
      return new ASTInteger(String.valueOf(Integer.parseInt(children[0].toString()) * Integer.parseInt(children[1].toString())));
    return this;
  }
}
/* JavaCC - OriginalChecksum=9b843968dc8f3b720db24cff0c5e2667 (do not edit this line) */
