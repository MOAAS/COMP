/* Generated By:JJTree: Do not edit this line. ASTVarDeclaration.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.HashMap;
import java.util.List;

public class ASTVarDeclaration extends SimpleNode {
  public ASTVarDeclaration(int id) {
    super(id);
  }

  public ASTVarDeclaration(JavaMMParser p, int id) {
    super(p, id);
  }

  public String generateCode() {
    if (this.parent instanceof ASTClassDeclaration) {
      return ".field field_" + this.children[1] + " " + ASTType.generateCodeChar(this.children[0]) + "\n";
    }
    else return "";
  }

  public static boolean validateType(Node node, SymbolTable table) {
    SimpleNode typeNode = (SimpleNode) node;
    String type = typeNode.toString();
    switch (type) {
      case "int[]":
      case "int":
      case "boolean": break;
      default:
        if (!table.checkClassImport(type)) {
          System.err.println("Error: Invalid variable type: \"" + type + "\" at line " + typeNode.line + ", column " + typeNode.column + ".");
          return false;
        }
    }
    return true;
  }

  public boolean explore(int order, SymbolTable parentTable) {
    super.explore(order, parentTable);

    String varType = this.jjtGetChild(0).toString();
    String varName = this.jjtGetChild(1).toString();

    if (!validateType(this.jjtGetChild(0), parentTable))
      return false;

    if(parentTable.checkIfSymbolExists(varName)) {
      System.err.println("Error: Duplicate variable name \"" + varName + "\" at line " + ((SimpleNode)this.jjtGetChild(1)).line + ", column " + ((SimpleNode)this.jjtGetChild(1)).column + ".");
      return false;
    }

    if(parentTable.getRootNodeString().equals("ClassDeclaration")) order = -1;
    VarSymbol varSymbol = new VarSymbol(varType, order);
    Symbol prevSymbol = parentTable.put(varName, varSymbol);

    return true;
  }

  @Override
  public StackLimitValues calculateStackLimit(StackLimitValues slv){
    return slv;
  }

  @Override
  public boolean isSemanticallyCorrect(HashMap<String, Integer> varInitTable) {
    if(!(this.parent instanceof ASTClassDeclaration)) {
      varInitTable.put(this.jjtGetChild(1).toString(), 0);
    }
    return true;
  }

  public void fillGraph(HashMap<String, LiveNode> graph, List<LiveNode> activeList) {
    String name = this.children[1].toString();
    graph.put(name, new LiveNode(name));
  }

}
/* JavaCC - OriginalChecksum=3f396d621b33f7404bb8f336cd7d8a46 (do not edit this line) */
